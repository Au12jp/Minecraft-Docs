name: Scrape
on:
  workflow_dispatch:
  schedule:
    - cron: "0 15 * * *"   # JST 0:00（ActionsはUTCで動作）

jobs:
  perform-fetch:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    env:
      USE_PREVIEW: "false"       # true なら preview 系で解決
      STRICT_SERIES: "true"      # true なら同系列(例: 1.21.100.*)優先で探し、無ければ全体から最も近いのを選ぶ

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download BDS (linux latest)
        uses: bedrock-apis/bds-download@v1
        with:
          out_dir: bedrock_server
          version: latest
          use_preview: ${{ env.USE_PREVIEW }}

      - name: List files
        run: ls -la bedrock_server

      - name: Check GitHub 100MB limit
        id: sizecheck
        shell: bash
        run: |
          set -e
          if find bedrock_server -type f -size +100M -print -quit | grep -q .; then
            echo ">=100MB files found. Skip commit."
            find bedrock_server -type f -size +100M -ls || true
            echo "skip_commit=true" >> "$GITHUB_OUTPUT"
          else
            echo "skip_commit=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Install jq & unzip
        run: sudo apt-get update && sudo apt-get install -y jq unzip

      # ---- bedrock-samples のタグ解決（最も近いタグにフォールバック）----
      - name: Resolve bedrock-samples tag (nearest fallback)
        id: resolve_tag
        env:
          GITHUB_TOKEN: ${{ github.token }}
        shell: bash
        run: |
          set -euo pipefail

          # 1) BDSの最新バージョン番号を取得（安定/プレビューを USE_PREVIEW と合わせる）
          JSON_URL="https://raw.githubusercontent.com/Bedrock-OSS/BDS-Versions/main/versions.json"
          versions_json="$(curl -fsSL "$JSON_URL")"
          if [ "${USE_PREVIEW}" = "true" ]; then
            ver="$(echo "$versions_json" | jq -r '.linux.preview')"
            tag_wanted="v${ver}-preview"
          else
            ver="$(echo "$versions_json" | jq -r '.linux.stable')"
            tag_wanted="v${ver}"
          fi
          echo "bds_version=$ver" >> "$GITHUB_OUTPUT"

          echo "Wanted tag: $tag_wanted"

          # 2) bedrock-samples のタグ一覧（認証付きでレート制限回避）
          hdr=(-H "Authorization: Bearer $GITHUB_TOKEN" -H "X-GitHub-Api-Version: 2022-11-28" -H "Accept: application/vnd.github+json")
          tags_json="$(curl -fsSL "${hdr[@]}" "https://api.github.com/repos/Mojang/bedrock-samples/tags?per_page=200")"

          # 3) まずは完全一致があるか
          exists="$(echo "$tags_json" | jq -r --arg T "$tag_wanted" '[.[] | select(.name==$T)] | length')"
          if [ "$exists" -gt 0 ]; then
            echo "samples_tag=$tag_wanted" >> "$GITHUB_OUTPUT"
            echo "fallback_used=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          # 4) 無ければ「最も近い」タグを選ぶ
          #    - USE_PREVIEW に一致する系のみから選択
          #    - STRICT_SERIES=true なら同系列 (major.minor.patch が同一) を優先し、
          #      見つからなければ全体から最小距離のものを選ぶ
          want_prev_bool=$([ "$USE_PREVIEW" = "true" ] && echo true || echo false)
          strict_bool=$([ "$STRICT_SERIES" = "true" ] && echo true || echo false)

          choose_nearest() {
            echo "$tags_json" | jq -r --arg ver "$ver" --argjson want_prev "$want_prev_bool" --argjson strict "$1" '
              def parse:
                map(select(.name | test("^v[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+(-preview)?$")))
                | map({
                    name: .name,
                    is_preview: (.name | contains("-preview")),
                    nums: (.name | sub("^v";"") | sub("-preview$";"") | split(".") | map(tonumber))
                  });
              def scalar(n): (n[0]*1000000000 + n[1]*1000000 + n[2]*1000 + n[3]);

              parse
              | map(select(.is_preview == $want_prev))
              | ($ver | split(".") | map(tonumber)) as $w
              | (if $strict
                   then map(select(.nums[0]==$w[0] and .nums[1]==$w[1] and .nums[2]==$w[2]))
                   else .
                 end)
              | if length==0 then [] else
                  map(. + {dist: ((scalar(.nums) - scalar($w)) | if . < 0 then -. else . end)})
                  | sort_by(.dist, .nums)                       # 距離→バージョン順で安定
                  | .[0:1] | .[0].name
                end
            '
          }

          # 4a) 同系列で探す（STRICT_SERIES=true のとき）
          chosen=""
          if [ "$strict_bool" = "true" ]; then
            chosen="$(choose_nearest true || true)"
          fi
          # 4b) 見つからなければ全体から最小距離
          if [ -z "${chosen:-}" ]; then
            chosen="$(choose_nearest false || true)"
          fi

          if [ -z "${chosen:-}" ]; then
            echo "::error::該当プレビュー/安定系のタグ候補が見つかりませんでした。"
            exit 1
          fi

          echo "Nearest fallback tag: $chosen"
          echo "samples_tag=$chosen" >> "$GITHUB_OUTPUT"
          echo "fallback_used=true" >> "$GITHUB_OUTPUT"

      - name: Download and extract bedrock-samples
        shell: bash
        run: |
          set -euo pipefail
          tag="${{ steps.resolve_tag.outputs.samples_tag }}"
          url="https://github.com/Mojang/bedrock-samples/archive/refs/tags/${tag}.zip"
          echo "Downloading ${url}"
          curl -fL "$url" -o samples.zip
          rm -rf bedrock_samples
          unzip -q samples.zip
          src_dir="$(ls -d bedrock-samples-* | head -n1)"
          mkdir -p bedrock_samples
          shopt -s dotglob
          mv "$src_dir"/* bedrock_samples/
          rmdir "$src_dir"
          rm -f samples.zip

      - name: Print resolved versions
        run: |
          echo "BDS:          ${{ steps.resolve_tag.outputs.bds_version }}"
          echo "Samples tag:  ${{ steps.resolve_tag.outputs.samples_tag }}"
          echo "Fallback:     ${{ steps.resolve_tag.outputs.fallback_used }}"

      - name: Ignore large binary (if any)
        if: ${{ steps.sizecheck.outputs.skip_commit == 'true' }}
        run: |
          set -e
          touch .gitignore
          grep -qxF 'bedrock_server/bedrock_server' .gitignore || echo 'bedrock_server/bedrock_server' >> .gitignore

      - name: Commit updated files
        uses: EndBug/add-and-commit@v9
        with:
          default_author: github_actions
          add: |
            - bedrock_server
            - bedrock_samples
          message: |
            Update BDS (${{ steps.resolve_tag.outputs.bds_version }}) and bedrock-samples (${{ steps.resolve_tag.outputs.samples_tag }})${{ steps.resolve_tag.outputs.fallback_used == 'true' && ' [fallback]' || '' }}
