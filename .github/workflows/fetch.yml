name: Scrape
on:
  workflow_dispatch:
  schedule:
    - cron: "*/10 * * * *"   # 10分ごと（UTC）
concurrency:
  group: scrape
  cancel-in-progress: false
jobs:
  # =========================
  # 1) 既存のスクレイプ更新 + アイテムJSON生成
  # =========================
  update:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: Checkout (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install deps
        run: sudo apt-get update && sudo apt-get install -y jq unzip
      - name: Git identity
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
      - name: Make scripts executable
        run: chmod +x scripts/*.sh
      
      # stable処理（worktree作成 → items JSON生成 → worktree維持）
      - name: Update stable (worktree)
        env:
          GITHUB_TOKEN: ${{ github.token }}
          STRICT_SERIES: "true"
        run: bash -x scripts/update_channel.sh stable
      
      - name: Generate items JSON for stable
        run: |
          echo "=== Checking stable worktree ==="
          ls -la _wt/ || echo "_wt directory not found"
          
          if [[ -d "_wt/stable" ]]; then
            echo "=== Generating items JSON for stable ==="
            ls -la "_wt/stable/"
            cd "_wt/stable"
            
            if [[ -d "bedrock_samples" ]]; then
              echo "bedrock_samples found, checking for items directory..."
              ls -la "bedrock_samples/" || echo "Cannot list bedrock_samples"
              
              if [[ -d "bedrock_samples/resource_pack/textures/items" ]]; then
                echo "Items directory found, generating JSON..."
                ls -la "bedrock_samples/resource_pack/textures/items/" | head -10
                bash -x "$GITHUB_WORKSPACE/scripts/generate_items_json.sh" stable
              else
                echo "Creating empty items JSON for stable..."
                printf '{"metadata":{"channel":"stable","samples_tag":"unknown","bds_version":"unknown","generated_at":"%s","total_items":0},"items":[]}\n' \
                  "$(date -u +%FT%TZ)" > "items_textures.json"
                git add items_textures.json
                git diff --cached --quiet || {
                  git commit -m "[stable] Add empty items textures JSON (no items directory)"
                  git push origin stable || echo "Warning: Failed to push stable"
                }
              fi
            else
              echo "bedrock_samples directory not found in stable"
            fi
            cd "$GITHUB_WORKSPACE"
          else
            echo "Stable worktree not found"
          fi
      
      # preview処理（worktree作成 → items JSON生成 → worktree維持）
      - name: Update preview (worktree)
        env:
          GITHUB_TOKEN: ${{ github.token }}
          STRICT_SERIES: "true"
        run: bash -x scripts/update_channel.sh preview
      
      - name: Generate items JSON for preview
        run: |
          echo "=== Checking preview worktree ==="
          ls -la _wt/ || echo "_wt directory not found"
          
          if [[ -d "_wt/preview" ]]; then
            echo "=== Generating items JSON for preview ==="
            ls -la "_wt/preview/"
            cd "_wt/preview"
            
            if [[ -d "bedrock_samples" ]]; then
              echo "bedrock_samples found, checking for items directory..."
              ls -la "bedrock_samples/" || echo "Cannot list bedrock_samples"
              
              if [[ -d "bedrock_samples/resource_pack/textures/items" ]]; then
                echo "Items directory found, generating JSON..."
                ls -la "bedrock_samples/resource_pack/textures/items/" | head -10
                bash -x "$GITHUB_WORKSPACE/scripts/generate_items_json.sh" preview
              else
                echo "Creating empty items JSON for preview..."
                printf '{"metadata":{"channel":"preview","samples_tag":"unknown","bds_version":"unknown","generated_at":"%s","total_items":0},"items":[]}\n' \
                  "$(date -u +%FT%TZ)" > "items_textures.json"
                git add items_textures.json
                git diff --cached --quiet || {
                  git commit -m "[preview] Add empty items textures JSON (no items directory)"
                  git push origin preview || echo "Warning: Failed to push preview"
                }
              fi
            else
              echo "bedrock_samples directory not found in preview"
            fi
            cd "$GITHUB_WORKSPACE"
          else
            echo "Preview worktree not found"
          fi
      
      - name: Check generated JSON files
        run: |
          echo "=== Checking for generated JSON files ==="
          find . -name "items_textures.json" -type f || echo "No items_textures.json files found"
          ls -la _wt/*/items_textures.json || echo "No JSON files in worktrees"
      
      - name: Update main (combine stable + preview)
        run: bash -x scripts/update_main.sh
      
      # --- 100MB超ファイルを後からDLできるようにArtifacts化 ---
      - name: Collect large files (>=100MB)
        id: collect_large
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p large_artifacts
          # .git配下は除外して100MB超を収集
          mapfile -d '' -t files < <(find . -path './.git' -prune -o -type f -size +100M -print0)
          if (( ${#files[@]} == 0 )); then
            echo "has_large=false" >> "$GITHUB_OUTPUT"
            echo "No >=100MB files found."
            exit 0
          fi
          # null区切りで安全にtarへ詰める
          printf '%s\0' "${files[@]}" | tar --null --files-from=- -czf large_artifacts/large-files.tar.gz
          echo "has_large=true" >> "$GITHUB_OUTPUT"
          echo "Archived ${#files[@]} file(s) into large_artifacts/large-files.tar.gz"
      
      - name: Upload large files artifact
        if: ${{ steps.collect_large.outputs.has_large == 'true' }}
        uses: actions/upload-artifact@v4
        with:
          name: large-files-${{ github.run_id }}
          path: large_artifacts/large-files.tar.gz
          retention-days: 7
      
      # アイテムJSONもアーティファクトとして保存
      - name: Upload items JSON artifacts
        uses: actions/upload-artifact@v4
        with:
          name: items-textures-json-${{ github.run_id }}
          path: |
            _wt/*/items_textures.json
            */items_textures.json
          retention-days: 30
          if-no-files-found: ignore

  # ============================================
  # 2) ProtocolParser で docs -> Markdown 生成
  # ============================================
  protocol-parse:
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:
      - name: Checkout (this repo)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout ProtocolParser sources
        uses: actions/checkout@v4
        with:
          repository: CloudburstMC/ProtocolParser
          path: ProtocolParser

      - name: Checkout Mojang bedrock-protocol-docs
        uses: actions/checkout@v4
        with:
          repository: Mojang/bedrock-protocol-docs
          path: protocol-docs   # 入力（dot/ と html/ がいるルート）

      - name: Set up Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      # Gradle（wrapperなし）を導入
      - name: Install Gradle 8.6
        run: |
          curl -sLo gradle.zip https://services.gradle.org/distributions/gradle-8.6-bin.zip
          unzip -q gradle.zip
          echo "$PWD/gradle-8.6/bin" >> "$GITHUB_PATH"

      - name: Verify Gradle
        run: gradle -v

      - name: Build ProtocolParser (shadowJar)
        run: gradle -p ProtocolParser --no-daemon shadowJar

      - name: Run ProtocolParser
        run: |
          mkdir -p generated/protocol-md
          java -jar ProtocolParser/build/libs/ProtocolParser.jar \
            -i="protocol-docs" \
            -o="generated/protocol-md"

      - name: Commit generated Markdown
        uses: EndBug/add-and-commit@v9
        with:
          default_author: github_actions
          add: generated/protocol-md
          message: "Update protocol markdown (auto-generated)"
